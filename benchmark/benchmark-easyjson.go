// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchmark

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark(in *jlexer.Lexer, out *SmallPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "st":
			out.St = int(in.Int())
		case "sid":
			out.Sid = int(in.Int())
		case "tt":
			out.Tt = string(in.String())
		case "gr":
			out.Gr = int(in.Int())
		case "uuid":
			out.Uuid = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "ua":
			out.Ua = string(in.String())
		case "tz":
			out.Tz = int(in.Int())
		case "v":
			out.V = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark(out *jwriter.Writer, in SmallPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"st\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.St))
	}
	{
		const prefix string = ",\"sid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sid))
	}
	{
		const prefix string = ",\"tt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tt))
	}
	{
		const prefix string = ",\"gr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Gr))
	}
	{
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"ua\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ua))
	}
	{
		const prefix string = ",\"tz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Tz))
	}
	{
		const prefix string = ",\"v\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.V))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmallPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmallPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark1(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "home":
			out.Home = string(in.String())
		case "sources":
			if in.IsNull() {
				in.Skip()
				out.Sources = nil
			} else {
				in.Delim('[')
				if out.Sources == nil {
					if !in.IsDelim(']') {
						out.Sources = make([]string, 0, 4)
					} else {
						out.Sources = []string{}
					}
				} else {
					out.Sources = (out.Sources)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Sources = append(out.Sources, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Keywords = append(out.Keywords, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maintainers":
			if in.IsNull() {
				in.Skip()
				out.Maintainers = nil
			} else {
				in.Delim('[')
				if out.Maintainers == nil {
					if !in.IsDelim(']') {
						out.Maintainers = make([]*Maintainer, 0, 8)
					} else {
						out.Maintainers = []*Maintainer{}
					}
				} else {
					out.Maintainers = (out.Maintainers)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *Maintainer
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(Maintainer)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Maintainers = append(out.Maintainers, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "engine":
			out.Engine = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "apiVersion":
			out.ApiVersion = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		case "tags":
			out.Tags = string(in.String())
		case "appVersion":
			out.AppVersion = string(in.String())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "tillerVersion":
			out.TillerVersion = string(in.String())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Annotations)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "kubeVersion":
			out.KubeVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark1(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Home != "" {
		const prefix string = ",\"home\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Home))
	}
	if len(in.Sources) != 0 {
		const prefix string = ",\"sources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Sources {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Keywords) != 0 {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Keywords {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.Maintainers) != 0 {
		const prefix string = ",\"maintainers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Maintainers {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Engine != "" {
		const prefix string = ",\"engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Engine))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if in.ApiVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApiVersion))
	}
	if in.Condition != "" {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Condition))
	}
	if in.Tags != "" {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tags))
	}
	if in.AppVersion != "" {
		const prefix string = ",\"appVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppVersion))
	}
	if in.Deprecated {
		const prefix string = ",\"deprecated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deprecated))
	}
	if in.TillerVersion != "" {
		const prefix string = ",\"tillerVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TillerVersion))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Annotations {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if in.KubeVersion != "" {
		const prefix string = ",\"kubeVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KubeVersion))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark1(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark2(in *jlexer.Lexer, out *MediumPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person":
			if in.IsNull() {
				in.Skip()
				out.Person = nil
			} else {
				if out.Person == nil {
					out.Person = new(CBPerson)
				}
				(*out.Person).UnmarshalEasyJSON(in)
			}
		case "company":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Company = make(map[string]interface{})
				} else {
					out.Company = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 interface{}
					if m, ok := v12.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v12.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v12 = in.Interface()
					}
					(out.Company)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark2(out *jwriter.Writer, in MediumPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Person == nil {
			out.RawString("null")
		} else {
			(*in.Person).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"company\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Company == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Company {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MediumPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MediumPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark2(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark3(in *jlexer.Lexer, out *Maintainer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark3(out *jwriter.Writer, in Maintainer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Maintainer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Maintainer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark3(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark4(in *jlexer.Lexer, out *LargePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*DSUser, 0, 8)
					} else {
						out.Users = []*DSUser{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *DSUser
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(DSUser)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.Users = append(out.Users, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				if out.Topics == nil {
					out.Topics = new(DSTopicsList)
				}
				(*out.Topics).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark4(out *jwriter.Writer, in LargePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Users {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					(*v16).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Topics == nil {
			out.RawString("null")
		} else {
			(*in.Topics).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LargePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LargePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark4(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark5(in *jlexer.Lexer, out *IndexFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "generated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Generated).UnmarshalJSON(data))
			}
		case "entries":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Entries = make(map[string]ChartVersions)
				} else {
					out.Entries = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 ChartVersions
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						in.Delim('[')
						if v17 == nil {
							if !in.IsDelim(']') {
								v17 = make(ChartVersions, 0, 1)
							} else {
								v17 = ChartVersions{}
							}
						} else {
							v17 = (v17)[:0]
						}
						for !in.IsDelim(']') {
							var v18 ChartVersion
							(v18).UnmarshalEasyJSON(in)
							v17 = append(v17, v18)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Entries)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark5(out *jwriter.Writer, in IndexFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"generated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Generated).MarshalJSON())
	}
	{
		const prefix string = ",\"entries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Entries == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Entries {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if v19Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v20, v21 := range v19Value {
						if v20 > 0 {
							out.RawByte(',')
						}
						(v21).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark5(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark6(in *jlexer.Lexer, out *DSUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark6(out *jwriter.Writer, in DSUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark6(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark7(in *jlexer.Lexer, out *DSTopicsList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]*DSTopic, 0, 8)
					} else {
						out.Topics = []*DSTopic{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *DSTopic
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(DSTopic)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Topics = append(out.Topics, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "moreTopicsUrl":
			out.MoreTopicsUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark7(out *jwriter.Writer, in DSTopicsList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Topics {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"moreTopicsUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MoreTopicsUrl))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSTopicsList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSTopicsList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark7(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark8(in *jlexer.Lexer, out *DSTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "slug":
			out.Slug = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark8(out *jwriter.Writer, in DSTopic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"slug\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Slug))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DSTopic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DSTopic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark8(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark9(in *jlexer.Lexer, out *ChartVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]string, 0, 4)
					} else {
						out.URLs = []string{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.URLs = append(out.URLs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "removed":
			out.Removed = bool(in.Bool())
		case "digest":
			out.Digest = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "home":
			out.Home = string(in.String())
		case "sources":
			if in.IsNull() {
				in.Skip()
				out.Sources = nil
			} else {
				in.Delim('[')
				if out.Sources == nil {
					if !in.IsDelim(']') {
						out.Sources = make([]string, 0, 4)
					} else {
						out.Sources = []string{}
					}
				} else {
					out.Sources = (out.Sources)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Sources = append(out.Sources, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.Keywords = append(out.Keywords, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maintainers":
			if in.IsNull() {
				in.Skip()
				out.Maintainers = nil
			} else {
				in.Delim('[')
				if out.Maintainers == nil {
					if !in.IsDelim(']') {
						out.Maintainers = make([]*Maintainer, 0, 8)
					} else {
						out.Maintainers = []*Maintainer{}
					}
				} else {
					out.Maintainers = (out.Maintainers)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *Maintainer
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(Maintainer)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.Maintainers = append(out.Maintainers, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "engine":
			out.Engine = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "apiVersion":
			out.ApiVersion = string(in.String())
		case "condition":
			out.Condition = string(in.String())
		case "tags":
			out.Tags = string(in.String())
		case "appVersion":
			out.AppVersion = string(in.String())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "tillerVersion":
			out.TillerVersion = string(in.String())
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Annotations)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "kubeVersion":
			out.KubeVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark9(out *jwriter.Writer, in ChartVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.URLs {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	if in.Removed {
		const prefix string = ",\"removed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Removed))
	}
	if in.Digest != "" {
		const prefix string = ",\"digest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Digest))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Home != "" {
		const prefix string = ",\"home\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Home))
	}
	if len(in.Sources) != 0 {
		const prefix string = ",\"sources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Sources {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Keywords) != 0 {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Keywords {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.Maintainers) != 0 {
		const prefix string = ",\"maintainers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Maintainers {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil {
					out.RawString("null")
				} else {
					(*v37).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Engine != "" {
		const prefix string = ",\"engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Engine))
	}
	if in.Icon != "" {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	if in.ApiVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ApiVersion))
	}
	if in.Condition != "" {
		const prefix string = ",\"condition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Condition))
	}
	if in.Tags != "" {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tags))
	}
	if in.AppVersion != "" {
		const prefix string = ",\"appVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AppVersion))
	}
	if in.Deprecated {
		const prefix string = ",\"deprecated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deprecated))
	}
	if in.TillerVersion != "" {
		const prefix string = ",\"tillerVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TillerVersion))
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.Annotations {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				out.String(string(v38Value))
			}
			out.RawByte('}')
		}
	}
	if in.KubeVersion != "" {
		const prefix string = ",\"kubeVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KubeVersion))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChartVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChartVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark9(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark10(in *jlexer.Lexer, out *CBPerson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(CBName)
				}
				(*out.Name).UnmarshalEasyJSON(in)
			}
		case "github":
			if in.IsNull() {
				in.Skip()
				out.Github = nil
			} else {
				if out.Github == nil {
					out.Github = new(CBGithub)
				}
				(*out.Github).UnmarshalEasyJSON(in)
			}
		case "gravatar":
			if in.IsNull() {
				in.Skip()
				out.Gravatar = nil
			} else {
				if out.Gravatar == nil {
					out.Gravatar = new(CBGravatar)
				}
				(*out.Gravatar).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark10(out *jwriter.Writer, in CBPerson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			(*in.Name).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"github\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Github == nil {
			out.RawString("null")
		} else {
			(*in.Github).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"gravatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Gravatar == nil {
			out.RawString("null")
		} else {
			(*in.Gravatar).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBPerson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBPerson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark10(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark11(in *jlexer.Lexer, out *CBName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullName":
			out.FullName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark11(out *jwriter.Writer, in CBName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullName))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark11(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark12(in *jlexer.Lexer, out *CBGravatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatars":
			if in.IsNull() {
				in.Skip()
				out.Avatars = nil
			} else {
				in.Delim('[')
				if out.Avatars == nil {
					if !in.IsDelim(']') {
						out.Avatars = make([]*CBAvatar, 0, 8)
					} else {
						out.Avatars = []*CBAvatar{}
					}
				} else {
					out.Avatars = (out.Avatars)[:0]
				}
				for !in.IsDelim(']') {
					var v39 *CBAvatar
					if in.IsNull() {
						in.Skip()
						v39 = nil
					} else {
						if v39 == nil {
							v39 = new(CBAvatar)
						}
						(*v39).UnmarshalEasyJSON(in)
					}
					out.Avatars = append(out.Avatars, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark12(out *jwriter.Writer, in CBGravatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Avatars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Avatars {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil {
					out.RawString("null")
				} else {
					(*v41).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBGravatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBGravatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark12(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark13(in *jlexer.Lexer, out *CBGithub) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "followers":
			out.Followers = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark13(out *jwriter.Writer, in CBGithub) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"followers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Followers))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBGithub) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBGithub) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark13(l, v)
}
func easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark14(in *jlexer.Lexer, out *CBAvatar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark14(out *jwriter.Writer, in CBAvatar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CBAvatar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa50737dEncodeGithubComDarthfennecJsonmuncherBenchmark14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CBAvatar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa50737dDecodeGithubComDarthfennecJsonmuncherBenchmark14(l, v)
}
