// Code generated by codecgen - DO NOT EDIT.

package benchmark

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF82709 = 1
	codecSelferCcRAW2709  = 0
	// ----- value types used ----
	codecSelferValueTypeArray2709  = 10
	codecSelferValueTypeMap2709    = 9
	codecSelferValueTypeString2709 = 6
	codecSelferValueTypeInt2709    = 2
	codecSelferValueTypeUint2709   = 3
	codecSelferValueTypeFloat2709  = 4
	codecSelferBitsize2709         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct2709 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer2709 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 time.Time
		_ = v0
	}
}

func (x *SmallPayload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(9)
			} else {
				r.WriteMapStart(9)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.St))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"St\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `St`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.St))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Sid))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Sid\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Sid`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Sid))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Tt))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Tt\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Tt`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Tt))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Gr))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Gr\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Gr`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Gr))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Uuid))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Uuid\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Uuid`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Uuid))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Ip))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Ip\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Ip`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Ip))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Ua))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Ua\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Ua`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Ua))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Tz))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Tz\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Tz`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Tz))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.V))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"V\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `V`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.V))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SmallPayload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *SmallPayload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "St":
			if r.TryDecodeAsNil() {
				x.St = 0
			} else {
				x.St = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		case "Sid":
			if r.TryDecodeAsNil() {
				x.Sid = 0
			} else {
				x.Sid = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		case "Tt":
			if r.TryDecodeAsNil() {
				x.Tt = ""
			} else {
				x.Tt = (string)(r.DecodeString())
			}
		case "Gr":
			if r.TryDecodeAsNil() {
				x.Gr = 0
			} else {
				x.Gr = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		case "Uuid":
			if r.TryDecodeAsNil() {
				x.Uuid = ""
			} else {
				x.Uuid = (string)(r.DecodeString())
			}
		case "Ip":
			if r.TryDecodeAsNil() {
				x.Ip = ""
			} else {
				x.Ip = (string)(r.DecodeString())
			}
		case "Ua":
			if r.TryDecodeAsNil() {
				x.Ua = ""
			} else {
				x.Ua = (string)(r.DecodeString())
			}
		case "Tz":
			if r.TryDecodeAsNil() {
				x.Tz = 0
			} else {
				x.Tz = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		case "V":
			if r.TryDecodeAsNil() {
				x.V = 0
			} else {
				x.V = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SmallPayload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.St = 0
	} else {
		x.St = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sid = 0
	} else {
		x.Sid = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Tt = ""
	} else {
		x.Tt = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Gr = 0
	} else {
		x.Gr = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Uuid = ""
	} else {
		x.Uuid = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ip = ""
	} else {
		x.Ip = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Ua = ""
	} else {
		x.Ua = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Tz = 0
	} else {
		x.Tz = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.V = 0
	} else {
		x.V = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CBAvatar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Url))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Url\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Url`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Url))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CBAvatar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *CBAvatar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Url":
			if r.TryDecodeAsNil() {
				x.Url = ""
			} else {
				x.Url = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CBAvatar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Url = ""
	} else {
		x.Url = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CBGravatar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Avatars == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoCBAvatar(([]*CBAvatar)(x.Avatars), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Avatars\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Avatars`)
				}
				r.WriteMapElemValue()
				if x.Avatars == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoCBAvatar(([]*CBAvatar)(x.Avatars), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CBGravatar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *CBGravatar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Avatars":
			if r.TryDecodeAsNil() {
				x.Avatars = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoCBAvatar((*[]*CBAvatar)(&x.Avatars), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CBGravatar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Avatars = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoCBAvatar((*[]*CBAvatar)(&x.Avatars), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CBGithub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Followers))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Followers\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Followers`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Followers))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CBGithub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *CBGithub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Followers":
			if r.TryDecodeAsNil() {
				x.Followers = 0
			} else {
				x.Followers = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CBGithub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Followers = 0
	} else {
		x.Followers = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CBName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.FullName))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"FullName\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `FullName`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.FullName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CBName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *CBName) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "FullName":
			if r.TryDecodeAsNil() {
				x.FullName = ""
			} else {
				x.FullName = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CBName) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.FullName = ""
	} else {
		x.FullName = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CBPerson) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			var yyn3 bool
			if x.Name == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Name == nil {
						r.EncodeNil()
					} else {
						x.Name.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Name\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Name`)
				}
				r.WriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					if x.Name == nil {
						r.EncodeNil()
					} else {
						x.Name.CodecEncodeSelf(e)
					}
				}
			}
			var yyn6 bool
			if x.Github == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Github == nil {
						r.EncodeNil()
					} else {
						x.Github.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Github\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Github`)
				}
				r.WriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if x.Github == nil {
						r.EncodeNil()
					} else {
						x.Github.CodecEncodeSelf(e)
					}
				}
			}
			var yyn9 bool
			if x.Gravatar == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Gravatar == nil {
						r.EncodeNil()
					} else {
						x.Gravatar.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Gravatar\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Gravatar`)
				}
				r.WriteMapElemValue()
				if yyn9 {
					r.EncodeNil()
				} else {
					if x.Gravatar == nil {
						r.EncodeNil()
					} else {
						x.Gravatar.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CBPerson) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *CBPerson) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				if true && x.Name != nil {
					x.Name = nil
				}
			} else {
				if x.Name == nil {
					x.Name = new(CBName)
				}

				x.Name.CodecDecodeSelf(d)
			}
		case "Github":
			if r.TryDecodeAsNil() {
				if true && x.Github != nil {
					x.Github = nil
				}
			} else {
				if x.Github == nil {
					x.Github = new(CBGithub)
				}

				x.Github.CodecDecodeSelf(d)
			}
		case "Gravatar":
			if r.TryDecodeAsNil() {
				if true && x.Gravatar != nil {
					x.Gravatar = nil
				}
			} else {
				if x.Gravatar == nil {
					x.Gravatar = new(CBGravatar)
				}

				x.Gravatar.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CBPerson) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Name != nil {
			x.Name = nil
		}
	} else {
		if x.Name == nil {
			x.Name = new(CBName)
		}

		x.Name.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Github != nil {
			x.Github = nil
		}
	} else {
		if x.Github == nil {
			x.Github = new(CBGithub)
		}

		x.Github.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Gravatar != nil {
			x.Gravatar = nil
		}
	} else {
		if x.Gravatar == nil {
			x.Gravatar = new(CBGravatar)
		}

		x.Gravatar.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *MediumPayload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			var yyn3 bool
			if x.Person == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Person == nil {
						r.EncodeNil()
					} else {
						x.Person.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Person\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Person`)
				}
				r.WriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					if x.Person == nil {
						r.EncodeNil()
					} else {
						x.Person.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Company == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Company, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Company\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Company`)
				}
				r.WriteMapElemValue()
				if x.Company == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Company, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *MediumPayload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *MediumPayload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Person":
			if r.TryDecodeAsNil() {
				if true && x.Person != nil {
					x.Person = nil
				}
			} else {
				if x.Person == nil {
					x.Person = new(CBPerson)
				}

				x.Person.CodecDecodeSelf(d)
			}
		case "Company":
			if r.TryDecodeAsNil() {
				x.Company = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringIntfX(&x.Company, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *MediumPayload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Person != nil {
			x.Person = nil
		}
	} else {
		if x.Person == nil {
			x.Person = new(CBPerson)
		}

		x.Person.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Company = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringIntfX(&x.Company, d)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DSUser) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Username))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Username\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Username))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DSUser) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *DSUser) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DSUser) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DSTopic) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Id))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Id\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Id))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Slug))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Slug\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Slug`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.Slug))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DSTopic) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *DSTopic) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Id":
			if r.TryDecodeAsNil() {
				x.Id = 0
			} else {
				x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
			}
		case "Slug":
			if r.TryDecodeAsNil() {
				x.Slug = ""
			} else {
				x.Slug = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DSTopic) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Id = 0
	} else {
		x.Id = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize2709))
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Slug = ""
	} else {
		x.Slug = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DSTopicsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Topics == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDSTopic(([]*DSTopic)(x.Topics), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Topics\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Topics`)
				}
				r.WriteMapElemValue()
				if x.Topics == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDSTopic(([]*DSTopic)(x.Topics), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.MoreTopicsUrl))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"MoreTopicsUrl\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `MoreTopicsUrl`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.MoreTopicsUrl))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *DSTopicsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *DSTopicsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Topics":
			if r.TryDecodeAsNil() {
				x.Topics = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDSTopic((*[]*DSTopic)(&x.Topics), d)
				}
			}
		case "MoreTopicsUrl":
			if r.TryDecodeAsNil() {
				x.MoreTopicsUrl = ""
			} else {
				x.MoreTopicsUrl = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *DSTopicsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Topics = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDSTopic((*[]*DSTopic)(&x.Topics), d)
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MoreTopicsUrl = ""
	} else {
		x.MoreTopicsUrl = (string)(r.DecodeString())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LargePayload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Users == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDSUser(([]*DSUser)(x.Users), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Users\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Users`)
				}
				r.WriteMapElemValue()
				if x.Users == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePtrtoDSUser(([]*DSUser)(x.Users), e)
					}
				}
			}
			var yyn6 bool
			if x.Topics == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Topics == nil {
						r.EncodeNil()
					} else {
						x.Topics.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Topics\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `Topics`)
				}
				r.WriteMapElemValue()
				if yyn6 {
					r.EncodeNil()
				} else {
					if x.Topics == nil {
						r.EncodeNil()
					} else {
						x.Topics.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *LargePayload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *LargePayload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoDSUser((*[]*DSUser)(&x.Users), d)
				}
			}
		case "Topics":
			if r.TryDecodeAsNil() {
				if true && x.Topics != nil {
					x.Topics = nil
				}
			} else {
				if x.Topics == nil {
					x.Topics = new(DSTopicsList)
				}

				x.Topics.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *LargePayload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoDSUser((*[]*DSUser)(&x.Users), d)
		}
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Topics != nil {
			x.Topics = nil
		}
	} else {
		if x.Topics == nil {
			x.Topics = new(DSTopicsList)
		}

		x.Topics.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *IndexFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.APIVersion))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"apiVersion\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `apiVersion`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF82709, string(x.APIVersion))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeTime(x.Generated)
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"generated\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `generated`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeTime(x.Generated)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Entries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringChartVersions((map[string]ChartVersions)(x.Entries), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"entries\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `entries`)
				}
				r.WriteMapElemValue()
				if x.Entries == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encMapstringChartVersions((map[string]ChartVersions)(x.Entries), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *IndexFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *IndexFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "generated":
			if r.TryDecodeAsNil() {
				x.Generated = time.Time{}
			} else {
				if false {
				} else {
					x.Generated = r.DecodeTime()
				}
			}
		case "entries":
			if r.TryDecodeAsNil() {
				x.Entries = nil
			} else {
				if false {
				} else {
					h.decMapstringChartVersions((*map[string]ChartVersions)(&x.Entries), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *IndexFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Generated = time.Time{}
	} else {
		if false {
		} else {
			x.Generated = r.DecodeTime()
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Entries = nil
	} else {
		if false {
		} else {
			h.decMapstringChartVersions((*map[string]ChartVersions)(&x.Entries), d)
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x ChartVersions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encChartVersions((ChartVersions)(x), e)
		}
	}
}

func (x *ChartVersions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decChartVersions((*ChartVersions)(x), d)
	}
}

func (x *ChartVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [21]bool{    // should field at this index be written?
				x.Name != "",            // Name
				x.Home != "",            // Home
				len(x.Sources) != 0,     // Sources
				x.Version != "",         // Version
				x.Description != "",     // Description
				len(x.Keywords) != 0,    // Keywords
				len(x.Maintainers) != 0, // Maintainers
				x.Engine != "",          // Engine
				x.Icon != "",            // Icon
				x.ApiVersion != "",      // ApiVersion
				x.Condition != "",       // Condition
				x.Tags != "",            // Tags
				x.AppVersion != "",      // AppVersion
				x.Deprecated,            // Deprecated
				x.TillerVersion != "",   // TillerVersion
				len(x.Annotations) != 0, // Annotations
				x.KubeVersion != "",     // KubeVersion
				true,                    // URLs
				!(x.Created.IsZero()),   // Created
				x.Removed,               // Removed
				x.Digest != "",          // Digest
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(21)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Home))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"home\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `home`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Home))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if x.Sources == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Sources, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"sources\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `sources`)
					}
					r.WriteMapElemValue()
					if x.Sources == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Sources, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Version))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"version\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `version`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Version))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"description\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `description`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Description))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Keywords == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Keywords, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"keywords\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `keywords`)
					}
					r.WriteMapElemValue()
					if x.Keywords == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Keywords, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Maintainers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicePtrtoMaintainer(([]*Maintainer)(x.Maintainers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"maintainers\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `maintainers`)
					}
					r.WriteMapElemValue()
					if x.Maintainers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicePtrtoMaintainer(([]*Maintainer)(x.Maintainers), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Engine))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"engine\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `engine`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Engine))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Icon))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"icon\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `icon`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Icon))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.ApiVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"apiVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `apiVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.ApiVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Condition))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"condition\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `condition`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Condition))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[11] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Tags))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"tags\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `tags`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Tags))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.AppVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"appVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `appVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.AppVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if false {
					} else {
						r.EncodeBool(bool(x.Deprecated))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"deprecated\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `deprecated`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.Deprecated))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[14] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.TillerVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[14] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"tillerVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `tillerVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.TillerVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"annotations\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `annotations`)
					}
					r.WriteMapElemValue()
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[16] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.KubeVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[16] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"kubeVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `kubeVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.KubeVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.URLs == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.URLs, e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"urls\"")
				} else {
					r.EncodeString(codecSelferCcUTF82709, `urls`)
				}
				r.WriteMapElemValue()
				if x.URLs == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						z.F.EncSliceStringV(x.URLs, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[18] {
					if false {
					} else {
						r.EncodeTime(x.Created)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[18] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"created\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `created`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeTime(x.Created)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[19] {
					if false {
					} else {
						r.EncodeBool(bool(x.Removed))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[19] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"removed\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `removed`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.Removed))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[20] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Digest))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[20] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"digest\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `digest`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Digest))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ChartVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *ChartVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Metadata.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "home":
			if r.TryDecodeAsNil() {
				x.Metadata.Home = ""
			} else {
				x.Home = (string)(r.DecodeString())
			}
		case "sources":
			if r.TryDecodeAsNil() {
				x.Metadata.Sources = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Sources, d)
				}
			}
		case "version":
			if r.TryDecodeAsNil() {
				x.Metadata.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Metadata.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "keywords":
			if r.TryDecodeAsNil() {
				x.Metadata.Keywords = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Keywords, d)
				}
			}
		case "maintainers":
			if r.TryDecodeAsNil() {
				x.Metadata.Maintainers = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoMaintainer((*[]*Maintainer)(&x.Maintainers), d)
				}
			}
		case "engine":
			if r.TryDecodeAsNil() {
				x.Metadata.Engine = ""
			} else {
				x.Engine = (string)(r.DecodeString())
			}
		case "icon":
			if r.TryDecodeAsNil() {
				x.Metadata.Icon = ""
			} else {
				x.Icon = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.Metadata.ApiVersion = ""
			} else {
				x.ApiVersion = (string)(r.DecodeString())
			}
		case "condition":
			if r.TryDecodeAsNil() {
				x.Metadata.Condition = ""
			} else {
				x.Condition = (string)(r.DecodeString())
			}
		case "tags":
			if r.TryDecodeAsNil() {
				x.Metadata.Tags = ""
			} else {
				x.Tags = (string)(r.DecodeString())
			}
		case "appVersion":
			if r.TryDecodeAsNil() {
				x.Metadata.AppVersion = ""
			} else {
				x.AppVersion = (string)(r.DecodeString())
			}
		case "deprecated":
			if r.TryDecodeAsNil() {
				x.Metadata.Deprecated = false
			} else {
				x.Deprecated = (bool)(r.DecodeBool())
			}
		case "tillerVersion":
			if r.TryDecodeAsNil() {
				x.Metadata.TillerVersion = ""
			} else {
				x.TillerVersion = (string)(r.DecodeString())
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Metadata.Annotations = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Annotations, d)
				}
			}
		case "kubeVersion":
			if r.TryDecodeAsNil() {
				x.Metadata.KubeVersion = ""
			} else {
				x.KubeVersion = (string)(r.DecodeString())
			}
		case "urls":
			if r.TryDecodeAsNil() {
				x.URLs = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.URLs, d)
				}
			}
		case "created":
			if r.TryDecodeAsNil() {
				x.Created = time.Time{}
			} else {
				if false {
				} else {
					x.Created = r.DecodeTime()
				}
			}
		case "removed":
			if r.TryDecodeAsNil() {
				x.Removed = false
			} else {
				x.Removed = (bool)(r.DecodeBool())
			}
		case "digest":
			if r.TryDecodeAsNil() {
				x.Digest = ""
			} else {
				x.Digest = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ChartVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj31 int
	var yyb31 bool
	var yyhl31 bool = l >= 0
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Home = ""
	} else {
		x.Home = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Sources = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Sources, d)
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Keywords = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Keywords, d)
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Maintainers = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoMaintainer((*[]*Maintainer)(&x.Maintainers), d)
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Engine = ""
	} else {
		x.Engine = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Icon = ""
	} else {
		x.Icon = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.ApiVersion = ""
	} else {
		x.ApiVersion = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Condition = ""
	} else {
		x.Condition = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Tags = ""
	} else {
		x.Tags = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.AppVersion = ""
	} else {
		x.AppVersion = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Deprecated = false
	} else {
		x.Deprecated = (bool)(r.DecodeBool())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.TillerVersion = ""
	} else {
		x.TillerVersion = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.Annotations = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Annotations, d)
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata.KubeVersion = ""
	} else {
		x.KubeVersion = (string)(r.DecodeString())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URLs = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.URLs, d)
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Created = time.Time{}
	} else {
		if false {
		} else {
			x.Created = r.DecodeTime()
		}
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Removed = false
	} else {
		x.Removed = (bool)(r.DecodeBool())
	}
	yyj31++
	if yyhl31 {
		yyb31 = yyj31 > l
	} else {
		yyb31 = r.CheckBreak()
	}
	if yyb31 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Digest = ""
	} else {
		x.Digest = (string)(r.DecodeString())
	}
	for {
		yyj31++
		if yyhl31 {
			yyb31 = yyj31 > l
		} else {
			yyb31 = r.CheckBreak()
		}
		if yyb31 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj31-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Metadata) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [17]bool{    // should field at this index be written?
				x.Name != "",            // Name
				x.Home != "",            // Home
				len(x.Sources) != 0,     // Sources
				x.Version != "",         // Version
				x.Description != "",     // Description
				len(x.Keywords) != 0,    // Keywords
				len(x.Maintainers) != 0, // Maintainers
				x.Engine != "",          // Engine
				x.Icon != "",            // Icon
				x.ApiVersion != "",      // ApiVersion
				x.Condition != "",       // Condition
				x.Tags != "",            // Tags
				x.AppVersion != "",      // AppVersion
				x.Deprecated,            // Deprecated
				x.TillerVersion != "",   // TillerVersion
				len(x.Annotations) != 0, // Annotations
				x.KubeVersion != "",     // KubeVersion
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(17)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Home))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"home\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `home`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Home))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if x.Sources == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Sources, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"sources\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `sources`)
					}
					r.WriteMapElemValue()
					if x.Sources == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Sources, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Version))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"version\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `version`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Version))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"description\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `description`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Description))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Keywords == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Keywords, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"keywords\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `keywords`)
					}
					r.WriteMapElemValue()
					if x.Keywords == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncSliceStringV(x.Keywords, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Maintainers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicePtrtoMaintainer(([]*Maintainer)(x.Maintainers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"maintainers\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `maintainers`)
					}
					r.WriteMapElemValue()
					if x.Maintainers == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							h.encSlicePtrtoMaintainer(([]*Maintainer)(x.Maintainers), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Engine))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"engine\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `engine`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Engine))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Icon))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"icon\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `icon`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Icon))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.ApiVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"apiVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `apiVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.ApiVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Condition))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"condition\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `condition`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Condition))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[11] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Tags))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"tags\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `tags`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Tags))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.AppVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"appVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `appVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.AppVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if false {
					} else {
						r.EncodeBool(bool(x.Deprecated))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"deprecated\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `deprecated`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeBool(bool(x.Deprecated))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[14] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.TillerVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[14] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"tillerVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `tillerVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.TillerVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"annotations\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `annotations`)
					}
					r.WriteMapElemValue()
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[16] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.KubeVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[16] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"kubeVersion\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `kubeVersion`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.KubeVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Metadata) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *Metadata) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "home":
			if r.TryDecodeAsNil() {
				x.Home = ""
			} else {
				x.Home = (string)(r.DecodeString())
			}
		case "sources":
			if r.TryDecodeAsNil() {
				x.Sources = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Sources, d)
				}
			}
		case "version":
			if r.TryDecodeAsNil() {
				x.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = (string)(r.DecodeString())
			}
		case "keywords":
			if r.TryDecodeAsNil() {
				x.Keywords = nil
			} else {
				if false {
				} else {
					z.F.DecSliceStringX(&x.Keywords, d)
				}
			}
		case "maintainers":
			if r.TryDecodeAsNil() {
				x.Maintainers = nil
			} else {
				if false {
				} else {
					h.decSlicePtrtoMaintainer((*[]*Maintainer)(&x.Maintainers), d)
				}
			}
		case "engine":
			if r.TryDecodeAsNil() {
				x.Engine = ""
			} else {
				x.Engine = (string)(r.DecodeString())
			}
		case "icon":
			if r.TryDecodeAsNil() {
				x.Icon = ""
			} else {
				x.Icon = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.ApiVersion = ""
			} else {
				x.ApiVersion = (string)(r.DecodeString())
			}
		case "condition":
			if r.TryDecodeAsNil() {
				x.Condition = ""
			} else {
				x.Condition = (string)(r.DecodeString())
			}
		case "tags":
			if r.TryDecodeAsNil() {
				x.Tags = ""
			} else {
				x.Tags = (string)(r.DecodeString())
			}
		case "appVersion":
			if r.TryDecodeAsNil() {
				x.AppVersion = ""
			} else {
				x.AppVersion = (string)(r.DecodeString())
			}
		case "deprecated":
			if r.TryDecodeAsNil() {
				x.Deprecated = false
			} else {
				x.Deprecated = (bool)(r.DecodeBool())
			}
		case "tillerVersion":
			if r.TryDecodeAsNil() {
				x.TillerVersion = ""
			} else {
				x.TillerVersion = (string)(r.DecodeString())
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				if false {
				} else {
					z.F.DecMapStringStringX(&x.Annotations, d)
				}
			}
		case "kubeVersion":
			if r.TryDecodeAsNil() {
				x.KubeVersion = ""
			} else {
				x.KubeVersion = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Metadata) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Home = ""
	} else {
		x.Home = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Sources = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Sources, d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Keywords = nil
	} else {
		if false {
		} else {
			z.F.DecSliceStringX(&x.Keywords, d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Maintainers = nil
	} else {
		if false {
		} else {
			h.decSlicePtrtoMaintainer((*[]*Maintainer)(&x.Maintainers), d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Engine = ""
	} else {
		x.Engine = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Icon = ""
	} else {
		x.Icon = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ApiVersion = ""
	} else {
		x.ApiVersion = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Condition = ""
	} else {
		x.Condition = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Tags = ""
	} else {
		x.Tags = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AppVersion = ""
	} else {
		x.AppVersion = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Deprecated = false
	} else {
		x.Deprecated = (bool)(r.DecodeBool())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TillerVersion = ""
	} else {
		x.TillerVersion = (string)(r.DecodeString())
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		if false {
		} else {
			z.F.DecMapStringStringX(&x.Annotations, d)
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.KubeVersion = ""
	} else {
		x.KubeVersion = (string)(r.DecodeString())
	}
	for {
		yyj25++
		if yyhl25 {
			yyb25 = yyj25 > l
		} else {
			yyb25 = r.CheckBreak()
		}
		if yyb25 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj25-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Maintainer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [3]bool{     // should field at this index be written?
				x.Name != "",  // Name
				x.Email != "", // Email
				x.Url != "",   // Url
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"name\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `name`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Email))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"email\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `email`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Email))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Url))
					}
				} else {
					r.EncodeString(codecSelferCcUTF82709, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"url\"")
					} else {
						r.EncodeString(codecSelferCcUTF82709, `url`)
					}
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF82709, string(x.Url))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Maintainer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2709 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2709 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct2709)
		}
	}
}

func (x *Maintainer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		case "email":
			if r.TryDecodeAsNil() {
				x.Email = ""
			} else {
				x.Email = (string)(r.DecodeString())
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.Url = ""
			} else {
				x.Url = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Maintainer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Email = ""
	} else {
		x.Email = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Url = ""
	} else {
		x.Url = (string)(r.DecodeString())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer2709) encSlicePtrtoCBAvatar(v []*CBAvatar, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2709) decSlicePtrtoCBAvatar(v *[]*CBAvatar, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*CBAvatar{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*CBAvatar, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*CBAvatar, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(CBAvatar)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*CBAvatar, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2709) encSlicePtrtoDSTopic(v []*DSTopic, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2709) decSlicePtrtoDSTopic(v *[]*DSTopic, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DSTopic{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DSTopic, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DSTopic, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DSTopic)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DSTopic, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2709) encSlicePtrtoDSUser(v []*DSUser, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2709) decSlicePtrtoDSUser(v *[]*DSUser, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*DSUser{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*DSUser, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*DSUser, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(DSUser)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*DSUser, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2709) encMapstringChartVersions(v map[string]ChartVersions, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteMapStart(len(v))
	for yyk1, yyv1 := range v {
		r.WriteMapElemKey()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF82709, string(yyk1))
		}
		r.WriteMapElemValue()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteMapEnd()
}

func (x codecSelfer2709) decMapstringChartVersions(v *map[string]ChartVersions, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1 := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string]ChartVersions, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 ChartVersions
	var yymg1, yymdn1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 != 0 {
		yyhl1 := yyl1 > 0
		for yyj1 := 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			r.ReadMapElemKey()
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yymk1 = (string)(r.DecodeString())
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			r.ReadMapElemValue()
			yymdn1 = false
			if r.TryDecodeAsNil() {
				yymdn1 = true
			} else {
				yymv1.CodecDecodeSelf(d)
			}

			if yymdn1 {
				if yybh1.DeleteOnNilMapValue {
					delete(yyv1, yymk1)
				} else {
					yyv1[yymk1] = nil
				}
			} else if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	r.ReadMapEnd()
}

func (x codecSelfer2709) encChartVersions(v ChartVersions, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2709) decChartVersions(v *ChartVersions, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ChartVersion{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 352)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ChartVersion, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 352)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]ChartVersion, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ChartVersion{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ChartVersion{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]ChartVersion, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2709) encSlicePtrtoMaintainer(v []*Maintainer, e *codec1978.Encoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer2709) decSlicePtrtoMaintainer(v *[]*Maintainer, d *codec1978.Decoder) {
	var h codecSelfer2709
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Maintainer{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Maintainer, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]*Maintainer, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Maintainer)
					}
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]*Maintainer, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
